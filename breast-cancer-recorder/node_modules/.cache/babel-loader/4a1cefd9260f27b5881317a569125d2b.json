{"ast":null,"code":"export const validatePatientData = patient => {\n  const errors = {};\n  if (!patient.name.trim()) {\n    errors.name = 'Name is required';\n  } else if (patient.name.length < 2) {\n    errors.name = 'Name must be at least 2 characters';\n  }\n  if (!patient.email) {\n    errors.email = 'Email is required';\n  } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(patient.email)) {\n    errors.email = 'Email is invalid';\n  }\n  if (!patient.age) {\n    errors.age = 'Age is required';\n  } else if (patient.age < 18 || patient.age > 120) {\n    errors.age = 'Age must be between 18 and 120';\n  }\n  if (!patient.weight) {\n    errors.weight = 'Weight is required';\n  } else if (patient.weight < 30 || patient.weight > 300) {\n    errors.weight = 'Weight must be between 30 and 300 kg';\n  }\n  if (!patient.location.trim()) {\n    errors.location = 'Location is required';\n  }\n  if (!patient.stage) {\n    errors.stage = 'Cancer stage is required';\n  }\n  if (!patient.dateDiagnosed) {\n    errors.dateDiagnosed = 'Diagnosis date is required';\n  } else if (new Date(patient.dateDiagnosed) > new Date()) {\n    errors.dateDiagnosed = 'Date cannot be in the future';\n  }\n  return errors;\n};","map":{"version":3,"names":["validatePatientData","patient","errors","name","trim","length","email","test","age","weight","location","stage","dateDiagnosed","Date"],"sources":["/home/daniel/Documents/PROJECTS/Genomic_Analysis/breast-cancer-recorder/src/utils/validation.js"],"sourcesContent":["export const validatePatientData = (patient) => {\n  const errors = {};\n  \n  if (!patient.name.trim()) {\n    errors.name = 'Name is required';\n  } else if (patient.name.length < 2) {\n    errors.name = 'Name must be at least 2 characters';\n  }\n  \n  if (!patient.email) {\n    errors.email = 'Email is required';\n  } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(patient.email)) {\n    errors.email = 'Email is invalid';\n  }\n  \n  if (!patient.age) {\n    errors.age = 'Age is required';\n  } else if (patient.age < 18 || patient.age > 120) {\n    errors.age = 'Age must be between 18 and 120';\n  }\n  \n  if (!patient.weight) {\n    errors.weight = 'Weight is required';\n  } else if (patient.weight < 30 || patient.weight > 300) {\n    errors.weight = 'Weight must be between 30 and 300 kg';\n  }\n  \n  if (!patient.location.trim()) {\n    errors.location = 'Location is required';\n  }\n  \n  if (!patient.stage) {\n    errors.stage = 'Cancer stage is required';\n  }\n  \n  if (!patient.dateDiagnosed) {\n    errors.dateDiagnosed = 'Diagnosis date is required';\n  } else if (new Date(patient.dateDiagnosed) > new Date()) {\n    errors.dateDiagnosed = 'Date cannot be in the future';\n  }\n  \n  return errors;\n};"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAIC,OAAO,IAAK;EAC9C,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,CAACD,OAAO,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC,EAAE;IACxBF,MAAM,CAACC,IAAI,GAAG,kBAAkB;EAClC,CAAC,MAAM,IAAIF,OAAO,CAACE,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;IAClCH,MAAM,CAACC,IAAI,GAAG,oCAAoC;EACpD;EAEA,IAAI,CAACF,OAAO,CAACK,KAAK,EAAE;IAClBJ,MAAM,CAACI,KAAK,GAAG,mBAAmB;EACpC,CAAC,MAAM,IAAI,CAAC,4BAA4B,CAACC,IAAI,CAACN,OAAO,CAACK,KAAK,CAAC,EAAE;IAC5DJ,MAAM,CAACI,KAAK,GAAG,kBAAkB;EACnC;EAEA,IAAI,CAACL,OAAO,CAACO,GAAG,EAAE;IAChBN,MAAM,CAACM,GAAG,GAAG,iBAAiB;EAChC,CAAC,MAAM,IAAIP,OAAO,CAACO,GAAG,GAAG,EAAE,IAAIP,OAAO,CAACO,GAAG,GAAG,GAAG,EAAE;IAChDN,MAAM,CAACM,GAAG,GAAG,gCAAgC;EAC/C;EAEA,IAAI,CAACP,OAAO,CAACQ,MAAM,EAAE;IACnBP,MAAM,CAACO,MAAM,GAAG,oBAAoB;EACtC,CAAC,MAAM,IAAIR,OAAO,CAACQ,MAAM,GAAG,EAAE,IAAIR,OAAO,CAACQ,MAAM,GAAG,GAAG,EAAE;IACtDP,MAAM,CAACO,MAAM,GAAG,sCAAsC;EACxD;EAEA,IAAI,CAACR,OAAO,CAACS,QAAQ,CAACN,IAAI,CAAC,CAAC,EAAE;IAC5BF,MAAM,CAACQ,QAAQ,GAAG,sBAAsB;EAC1C;EAEA,IAAI,CAACT,OAAO,CAACU,KAAK,EAAE;IAClBT,MAAM,CAACS,KAAK,GAAG,0BAA0B;EAC3C;EAEA,IAAI,CAACV,OAAO,CAACW,aAAa,EAAE;IAC1BV,MAAM,CAACU,aAAa,GAAG,4BAA4B;EACrD,CAAC,MAAM,IAAI,IAAIC,IAAI,CAACZ,OAAO,CAACW,aAAa,CAAC,GAAG,IAAIC,IAAI,CAAC,CAAC,EAAE;IACvDX,MAAM,CAACU,aAAa,GAAG,8BAA8B;EACvD;EAEA,OAAOV,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}