{"map":"{\"version\":3,\"sources\":[\"/home/daniel/Documents/PROJECTS/Genomic_Analysis/breast-cancer-recorder/src/components/PatientForm.js\",\"/home/daniel/Documents/PROJECTS/Genomic_Analysis/breast-cancer-recorder/src/utils/validation.js\",\"/home/daniel/Documents/PROJECTS/Genomic_Analysis/breast-cancer-recorder/src/utils/csvGenerator.js\",\"/home/daniel/Documents/PROJECTS/Genomic_Analysis/breast-cancer-recorder/src/components/DataTable.js\",\"/home/daniel/Documents/PROJECTS/Genomic_Analysis/breast-cancer-recorder/src/App.js\",\"/home/daniel/Documents/PROJECTS/Genomic_Analysis/breast-cancer-recorder/src/reportWebVitals.js\",\"/home/daniel/Documents/PROJECTS/Genomic_Analysis/breast-cancer-recorder/src/index.js\"],\"names\":[\"PatientForm\",\"_ref\",\"onAddPatient\",\"patient\",\"setPatient\",\"useState\",\"name\",\"email\",\"age\",\"weight\",\"location\",\"stage\",\"dateDiagnosed\",\"errors\",\"setErrors\",\"success\",\"setSuccess\",\"handleChange\",\"e\",\"value\",\"target\",\"prev\",\"[object Object]\",\"React\",\"createElement\",\"className\",\"Form\",\"onSubmit\",\"preventDefault\",\"validationErrors\",\"trim\",\"length\",\"test\",\"Date\",\"validatePatientData\",\"Object\",\"keys\",\"setTimeout\",\"Alert\",\"variant\",\"Row\",\"Col\",\"md\",\"Group\",\"controlId\",\"Label\",\"Control\",\"type\",\"onChange\",\"isInvalid\",\"Feedback\",\"as\",\"Button\",\"getStageColor\",\"DataTable\",\"patients\",\"onDeletePatient\",\"onUpdatePatient\",\"currentPage\",\"setCurrentPage\",\"patientsPerPage\",\"showEditModal\",\"setShowEditModal\",\"showDeleteModal\",\"setShowDeleteModal\",\"currentPatient\",\"setCurrentPatient\",\"indexOfLastPatient\",\"indexOfFirstPatient\",\"currentPatients\",\"slice\",\"totalPages\",\"Math\",\"ceil\",\"Fragment\",\"Table\",\"striped\",\"bordered\",\"hover\",\"responsive\",\"map\",\"index\",\"key\",\"size\",\"onClick\",\"handleEdit\",\"handleDelete\",\"Pagination\",\"Prev\",\"p\",\"max\",\"disabled\",\"Array\",\"from\",\"_\",\"i\",\"Item\",\"active\",\"Next\",\"min\",\"downloadCSV\",\"csvContent\",\"rows\",\"join\",\"row\",\"item\",\"String\",\"replace\",\"generateCSV\",\"blob\",\"Blob\",\"url\",\"URL\",\"createObjectURL\",\"link\",\"document\",\"setAttribute\",\"body\",\"appendChild\",\"click\",\"removeChild\",\"Modal\",\"show\",\"onHide\",\"Header\",\"closeButton\",\"Title\",\"Body\",\"Footer\",\"handleSave\",\"confirmDelete\",\"App\",\"setPatients\",\"showTable\",\"setShowTable\",\"patientToDelete\",\"filter\",\"updatedPatient\",\"reportWebVitals\",\"onPerfEntry\",\"Function\",\"__webpack_require__\",\"then\",\"bind\",\"getCLS\",\"getFID\",\"getFCP\",\"getLCP\",\"getTTFB\",\"ReactDOM\",\"createRoot\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState } from 'react';\\nimport { Form, Button, Alert, Row, Col } from 'react-bootstrap';\\nimport { validatePatientData } from '../utils/validation';\\n\\nconst PatientForm = ({ onAddPatient }) => {\\n  const [patient, setPatient] = useState({\\n    name: '',\\n    email: '',\\n    age: '',\\n    weight: '',\\n    location: '',\\n    stage: '',\\n    dateDiagnosed: ''\\n  });\\n  \\n  const [errors, setErrors] = useState({});\\n  const [success, setSuccess] = useState(false);\\n\\n  const handleChange = (e) => {\\n    const { name, value } = e.target;\\n    setPatient(prev => ({ ...prev, [name]: value }));\\n  };\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    const validationErrors = validatePatientData(patient);\\n    \\n    if (Object.keys(validationErrors).length > 0) {\\n      setErrors(validationErrors);\\n      setSuccess(false);\\n    } else {\\n      setErrors({});\\n      onAddPatient(patient);\\n      setPatient({\\n        name: '',\\n        email: '',\\n        age: '',\\n        weight: '',\\n        location: '',\\n        stage: '',\\n        dateDiagnosed: ''\\n      });\\n      setSuccess(true);\\n      setTimeout(() => setSuccess(false), 3000);\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"form-container\\\">\\n      <h2>Patient Information</h2>\\n      <Form onSubmit={handleSubmit}>\\n        {success && <Alert variant=\\\"success\\\">Patient data recorded successfully!</Alert>}\\n        \\n        <Row>\\n          <Col md={6}>\\n            <Form.Group controlId=\\\"name\\\">\\n              <Form.Label>Full Name</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                name=\\\"name\\\"\\n                value={patient.name}\\n                onChange={handleChange}\\n                isInvalid={!!errors.name}\\n              />\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.name}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n          </Col>\\n          <Col md={6}>\\n            <Form.Group controlId=\\\"email\\\">\\n              <Form.Label>Email</Form.Label>\\n              <Form.Control\\n                type=\\\"email\\\"\\n                name=\\\"email\\\"\\n                value={patient.email}\\n                onChange={handleChange}\\n                isInvalid={!!errors.email}\\n              />\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.email}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n          </Col>\\n        </Row>\\n\\n        <Row>\\n          <Col md={4}>\\n            <Form.Group controlId=\\\"age\\\">\\n              <Form.Label>Age</Form.Label>\\n              <Form.Control\\n                type=\\\"number\\\"\\n                name=\\\"age\\\"\\n                value={patient.age}\\n                onChange={handleChange}\\n                isInvalid={!!errors.age}\\n              />\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.age}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n          </Col>\\n          <Col md={4}>\\n            <Form.Group controlId=\\\"weight\\\">\\n              <Form.Label>Weight (kg)</Form.Label>\\n              <Form.Control\\n                type=\\\"number\\\"\\n                name=\\\"weight\\\"\\n                value={patient.weight}\\n                onChange={handleChange}\\n                isInvalid={!!errors.weight}\\n              />\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.weight}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n          </Col>\\n          <Col md={4}>\\n            <Form.Group controlId=\\\"stage\\\">\\n              <Form.Label>Cancer Stage</Form.Label>\\n              <Form.Control\\n                as=\\\"select\\\"\\n                name=\\\"stage\\\"\\n                value={patient.stage}\\n                onChange={handleChange}\\n                isInvalid={!!errors.stage}\\n              >\\n                <option value=\\\"\\\">Select stage</option>\\n                <option value=\\\"0\\\">0 - Carcinoma in situ</option>\\n                <option value=\\\"I\\\">I</option>\\n                <option value=\\\"II\\\">II</option>\\n                <option value=\\\"III\\\">III</option>\\n                <option value=\\\"IV\\\">IV</option>\\n              </Form.Control>\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.stage}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n          </Col>\\n        </Row>\\n\\n        <Form.Group controlId=\\\"location\\\">\\n          <Form.Label>Location (City/Region)</Form.Label>\\n          <Form.Control\\n            type=\\\"text\\\"\\n            name=\\\"location\\\"\\n            value={patient.location}\\n            onChange={handleChange}\\n            isInvalid={!!errors.location}\\n          />\\n          <Form.Control.Feedback type=\\\"invalid\\\">\\n            {errors.location}\\n          </Form.Control.Feedback>\\n        </Form.Group>\\n\\n        <Form.Group controlId=\\\"dateDiagnosed\\\">\\n          <Form.Label>Date Diagnosed</Form.Label>\\n          <Form.Control\\n            type=\\\"date\\\"\\n            name=\\\"dateDiagnosed\\\"\\n            value={patient.dateDiagnosed}\\n            onChange={handleChange}\\n            isInvalid={!!errors.dateDiagnosed}\\n          />\\n          <Form.Control.Feedback type=\\\"invalid\\\">\\n            {errors.dateDiagnosed}\\n          </Form.Control.Feedback>\\n        </Form.Group>\\n\\n        <Button variant=\\\"primary\\\" type=\\\"submit\\\" className=\\\"submit-btn\\\">\\n          Record Patient Data\\n        </Button>\\n      </Form>\\n    </div>\\n  );\\n};\\n\\nexport default PatientForm;\",\"export const validatePatientData = (patient) => {\\n  const errors = {};\\n  \\n  if (!patient.name.trim()) {\\n    errors.name = 'Name is required';\\n  } else if (patient.name.length < 2) {\\n    errors.name = 'Name must be at least 2 characters';\\n  }\\n  \\n  if (!patient.email) {\\n    errors.email = 'Email is required';\\n  } else if (!/^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/.test(patient.email)) {\\n    errors.email = 'Email is invalid';\\n  }\\n  \\n  if (!patient.age) {\\n    errors.age = 'Age is required';\\n  } else if (patient.age < 18 || patient.age > 120) {\\n    errors.age = 'Age must be between 18 and 120';\\n  }\\n  \\n  if (!patient.weight) {\\n    errors.weight = 'Weight is required';\\n  } else if (patient.weight < 30 || patient.weight > 300) {\\n    errors.weight = 'Weight must be between 30 and 300 kg';\\n  }\\n  \\n  if (!patient.location.trim()) {\\n    errors.location = 'Location is required';\\n  }\\n  \\n  if (!patient.stage) {\\n    errors.stage = 'Cancer stage is required';\\n  }\\n  \\n  if (!patient.dateDiagnosed) {\\n    errors.dateDiagnosed = 'Diagnosis date is required';\\n  } else if (new Date(patient.dateDiagnosed) > new Date()) {\\n    errors.dateDiagnosed = 'Date cannot be in the future';\\n  }\\n  \\n  return errors;\\n};\",\"export const generateCSV = (patients) => {\\n  const headers = [\\n    'Name', 'Email', 'Age', 'Weight (kg)', \\n    'Location', 'Cancer Stage', 'Date Diagnosed'\\n  ];\\n  \\n  const rows = patients.map(patient => [\\n    patient.name,\\n    patient.email,\\n    patient.age,\\n    patient.weight,\\n    patient.location,\\n    patient.stage,\\n    patient.dateDiagnosed\\n  ]);\\n  \\n  const csvRows = [\\n    headers.join(','),\\n    ...rows.map(row => \\n      row.map(item => `\\\"${String(item).replace(/\\\"/g, '\\\"\\\"')}\\\"`).join(',')\\n    )\\n  ];\\n  \\n  return csvRows.join('\\\\n');\\n};\",\"import React, { useState } from 'react';\\nimport { \\n  Table, \\n  Button, \\n  Modal, \\n  Form,   // <-- This was missing\\n  Pagination \\n} from 'react-bootstrap';\\nimport { generateCSV } from '../utils/csvGenerator';\\n\\nconst DataTable = ({ patients, onDeletePatient, onUpdatePatient }) => {\\n  const [currentPage, setCurrentPage] = useState(1);\\n  const [patientsPerPage] = useState(5);\\n  const [showEditModal, setShowEditModal] = useState(false);\\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\\n  const [currentPatient, setCurrentPatient] = useState(null);\\n\\n  // Pagination logic\\n  const indexOfLastPatient = currentPage * patientsPerPage;\\n  const indexOfFirstPatient = indexOfLastPatient - patientsPerPage;\\n  const currentPatients = patients.slice(indexOfFirstPatient, indexOfLastPatient);\\n  const totalPages = Math.ceil(patients.length / patientsPerPage);\\n\\n  const handleEdit = (patient) => {\\n    setCurrentPatient(patient);\\n    setShowEditModal(true);\\n  };\\n\\n  const handleSave = () => {\\n    onUpdatePatient(currentPatient);\\n    setShowEditModal(false);\\n  };\\n\\n  const handleDelete = (patient) => {\\n    setCurrentPatient(patient);\\n    setShowDeleteModal(true);\\n  };\\n\\n  const confirmDelete = () => {\\n    onDeletePatient(currentPatient);\\n    setShowDeleteModal(false);\\n  };\\n\\n  const downloadCSV = () => {\\n    const csvContent = generateCSV(patients);\\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\\n    const url = URL.createObjectURL(blob);\\n    const link = document.createElement('a');\\n    link.setAttribute('href', url);\\n    link.setAttribute('download', 'breast_cancer_patients.csv');\\n    document.body.appendChild(link);\\n    link.click();\\n    document.body.removeChild(link);\\n  };\\n\\n  return (\\n    <div className=\\\"table-container\\\">\\n      <h2>Recorded Patients</h2>\\n      {patients.length > 0 ? (\\n        <>\\n          <Table striped bordered hover responsive>\\n            <thead>\\n              <tr>\\n                <th>Name</th>\\n                <th>Email</th>\\n                <th>Age</th>\\n                <th>Weight</th>\\n                <th>Location</th>\\n                <th>Stage</th>\\n                <th>Diagnosed</th>\\n                <th>Actions</th>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              {currentPatients.map((patient, index) => (\\n                <tr key={index}>\\n                  <td>{patient.name}</td>\\n                  <td>{patient.email}</td>\\n                  <td>{patient.age}</td>\\n                  <td>{patient.weight} kg</td>\\n                  <td>{patient.location}</td>\\n                  <td>\\n                    <span className={`badge bg-${getStageColor(patient.stage)}`}>\\n                      {patient.stage}\\n                    </span>\\n                  </td>\\n                  <td>{patient.dateDiagnosed}</td>\\n                  <td>\\n                    <Button variant=\\\"outline-primary\\\" size=\\\"sm\\\" onClick={() => handleEdit(patient)}>\\n                      Edit\\n                    </Button>{' '}\\n                    <Button variant=\\\"outline-danger\\\" size=\\\"sm\\\" onClick={() => handleDelete(patient)}>\\n                      Delete\\n                    </Button>\\n                  </td>\\n                </tr>\\n              ))}\\n            </tbody>\\n          </Table>\\n\\n          {totalPages > 1 && (\\n            <Pagination className=\\\"justify-content-center mt-3\\\">\\n              <Pagination.Prev \\n                onClick={() => setCurrentPage(p => Math.max(p - 1, 1))} \\n                disabled={currentPage === 1}\\n              />\\n              {Array.from({ length: totalPages }, (_, i) => (\\n                <Pagination.Item\\n                  key={i + 1}\\n                  active={i + 1 === currentPage}\\n                  onClick={() => setCurrentPage(i + 1)}\\n                >\\n                  {i + 1}\\n                </Pagination.Item>\\n              ))}\\n              <Pagination.Next \\n                onClick={() => setCurrentPage(p => Math.min(p + 1, totalPages))} \\n                disabled={currentPage === totalPages}\\n              />\\n            </Pagination>\\n          )}\\n\\n          <Button variant=\\\"success\\\" onClick={downloadCSV} className=\\\"mt-3\\\">\\n            Download CSV\\n          </Button>\\n        </>\\n      ) : (\\n        <p>No patient data recorded yet.</p>\\n      )}\\n\\n      {/* Edit Modal */}\\n      <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>\\n        <Modal.Header closeButton>\\n          <Modal.Title>Edit Patient</Modal.Title>\\n        </Modal.Header>\\n        <Modal.Body>\\n          <Form.Group className=\\\"mb-3\\\">\\n            <Form.Label>Name</Form.Label>\\n            <Form.Control\\n              type=\\\"text\\\"\\n              value={currentPatient?.name || ''}\\n              onChange={(e) => setCurrentPatient({...currentPatient, name: e.target.value})}\\n            />\\n          </Form.Group>\\n          {/* Add other fields similarly */}\\n        </Modal.Body>\\n        <Modal.Footer>\\n          <Button variant=\\\"secondary\\\" onClick={() => setShowEditModal(false)}>\\n            Cancel\\n          </Button>\\n          <Button variant=\\\"primary\\\" onClick={handleSave}>\\n            Save Changes\\n          </Button>\\n        </Modal.Footer>\\n      </Modal>\\n\\n      {/* Delete Modal */}\\n      <Modal show={showDeleteModal} onHide={() => setShowDeleteModal(false)}>\\n        <Modal.Header closeButton>\\n          <Modal.Title>Confirm Delete</Modal.Title>\\n        </Modal.Header>\\n        <Modal.Body>\\n          Are you sure you want to delete {currentPatient?.name}'s record?\\n        </Modal.Body>\\n        <Modal.Footer>\\n          <Button variant=\\\"secondary\\\" onClick={() => setShowDeleteModal(false)}>\\n            Cancel\\n          </Button>\\n          <Button variant=\\\"danger\\\" onClick={confirmDelete}>\\n            Delete\\n          </Button>\\n        </Modal.Footer>\\n      </Modal>\\n    </div>\\n  );\\n};\\n\\nconst getStageColor = (stage) => {\\n  switch(stage) {\\n    case '0': return 'info';\\n    case 'I': return 'primary';\\n    case 'II': return 'warning';\\n    case 'III': return 'danger';\\n    case 'IV': return 'dark';\\n    default: return 'secondary';\\n  }\\n};\\n\\nexport default DataTable;\",\"import React, { useState } from 'react';\\nimport PatientForm from './components/PatientForm';\\nimport DataTable from './components/DataTable';\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\nimport './styles.css';\\n\\nfunction App() {\\n  const [patients, setPatients] = useState([]);\\n  const [showTable, setShowTable] = useState(false);\\n\\n  const addPatient = (patient) => {\\n    setPatients([...patients, patient]);\\n    setShowTable(true);\\n  };\\n\\n  const deletePatient = (patientToDelete) => {\\n    setPatients(patients.filter(p => p.email !== patientToDelete.email));\\n  };\\n\\n  const updatePatient = (updatedPatient) => {\\n    setPatients(patients.map(p => \\n      p.email === updatedPatient.email ? updatedPatient : p\\n    ));\\n  };\\n\\n  return (\\n    <div className=\\\"app-container\\\">\\n      <header className=\\\"app-header\\\">\\n        <h1>Breast Cancer Patient Recorder</h1>\\n        <p className=\\\"lead\\\">Record and manage patient data efficiently</p>\\n      </header>\\n      \\n      <div className=\\\"container-fluid\\\">\\n        <div className=\\\"row\\\">\\n          <div className=\\\"col-lg-6\\\">\\n            <PatientForm onAddPatient={addPatient} />\\n          </div>\\n          <div className=\\\"col-lg-6\\\">\\n            {showTable && (\\n              <DataTable \\n                patients={patients} \\n                onDeletePatient={deletePatient}\\n                onUpdatePatient={updatePatient}\\n              />\\n            )}\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\",\"const reportWebVitals = onPerfEntry => {\\n  if (onPerfEntry && onPerfEntry instanceof Function) {\\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\\n      getCLS(onPerfEntry);\\n      getFID(onPerfEntry);\\n      getFCP(onPerfEntry);\\n      getLCP(onPerfEntry);\\n      getTTFB(onPerfEntry);\\n    });\\n  }\\n};\\n\\nexport default reportWebVitals;\",\"// src/index.js\\n\\nimport React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './styles.css';\\nimport App from './App';\\nimport reportWebVitals from './reportWebVitals';\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\n\\n// Create a root element for React 18's concurrent rendering\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\n\\n// Render the main App component\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n// Performance monitoring (optional)\\n// Learn more: https://bit.ly/CRA-vitals\\nreportWebVitals();\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{30:function(e,a,t){},37:function(e,a,t){e.exports=t(48)},48:function(e,a,t){\"use strict\";t.r(a);var n=t(0),l=t.n(n),r=t(33),c=t.n(r),i=(t(30),t(54)),o=t(55),m=t(50),s=t(34),d=t(51);var u=e=>{let{onAddPatient:a}=e;const[t,r]=Object(n.useState)({name:\"\",email:\"\",age:\"\",weight:\"\",location:\"\",stage:\"\",dateDiagnosed:\"\"}),[c,u]=Object(n.useState)({}),[E,g]=Object(n.useState)(!1),p=e=>{const{name:a,value:t}=e.target;r(e=>({...e,[a]:t}))};return l.a.createElement(\"div\",{className:\"form-container\"},l.a.createElement(\"h2\",null,\"Patient Information\"),l.a.createElement(i.a,{onSubmit:e=>{e.preventDefault();const n=(e=>{const a={};return e.name.trim()?e.name.length<2&&(a.name=\"Name must be at least 2 characters\"):a.name=\"Name is required\",e.email?/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(e.email)||(a.email=\"Email is invalid\"):a.email=\"Email is required\",e.age?(e.age<18||e.age>120)&&(a.age=\"Age must be between 18 and 120\"):a.age=\"Age is required\",e.weight?(e.weight<30||e.weight>300)&&(a.weight=\"Weight must be between 30 and 300 kg\"):a.weight=\"Weight is required\",e.location.trim()||(a.location=\"Location is required\"),e.stage||(a.stage=\"Cancer stage is required\"),e.dateDiagnosed?new Date(e.dateDiagnosed)>new Date&&(a.dateDiagnosed=\"Date cannot be in the future\"):a.dateDiagnosed=\"Diagnosis date is required\",a})(t);Object.keys(n).length>0?(u(n),g(!1)):(u({}),a(t),r({name:\"\",email:\"\",age:\"\",weight:\"\",location:\"\",stage:\"\",dateDiagnosed:\"\"}),g(!0),setTimeout(()=>g(!1),3e3))}},E&&l.a.createElement(o.a,{variant:\"success\"},\"Patient data recorded successfully!\"),l.a.createElement(m.a,null,l.a.createElement(s.a,{md:6},l.a.createElement(i.a.Group,{controlId:\"name\"},l.a.createElement(i.a.Label,null,\"Full Name\"),l.a.createElement(i.a.Control,{type:\"text\",name:\"name\",value:t.name,onChange:p,isInvalid:!!c.name}),l.a.createElement(i.a.Control.Feedback,{type:\"invalid\"},c.name))),l.a.createElement(s.a,{md:6},l.a.createElement(i.a.Group,{controlId:\"email\"},l.a.createElement(i.a.Label,null,\"Email\"),l.a.createElement(i.a.Control,{type:\"email\",name:\"email\",value:t.email,onChange:p,isInvalid:!!c.email}),l.a.createElement(i.a.Control.Feedback,{type:\"invalid\"},c.email)))),l.a.createElement(m.a,null,l.a.createElement(s.a,{md:4},l.a.createElement(i.a.Group,{controlId:\"age\"},l.a.createElement(i.a.Label,null,\"Age\"),l.a.createElement(i.a.Control,{type:\"number\",name:\"age\",value:t.age,onChange:p,isInvalid:!!c.age}),l.a.createElement(i.a.Control.Feedback,{type:\"invalid\"},c.age))),l.a.createElement(s.a,{md:4},l.a.createElement(i.a.Group,{controlId:\"weight\"},l.a.createElement(i.a.Label,null,\"Weight (kg)\"),l.a.createElement(i.a.Control,{type:\"number\",name:\"weight\",value:t.weight,onChange:p,isInvalid:!!c.weight}),l.a.createElement(i.a.Control.Feedback,{type:\"invalid\"},c.weight))),l.a.createElement(s.a,{md:4},l.a.createElement(i.a.Group,{controlId:\"stage\"},l.a.createElement(i.a.Label,null,\"Cancer Stage\"),l.a.createElement(i.a.Control,{as:\"select\",name:\"stage\",value:t.stage,onChange:p,isInvalid:!!c.stage},l.a.createElement(\"option\",{value:\"\"},\"Select stage\"),l.a.createElement(\"option\",{value:\"0\"},\"0 - Carcinoma in situ\"),l.a.createElement(\"option\",{value:\"I\"},\"I\"),l.a.createElement(\"option\",{value:\"II\"},\"II\"),l.a.createElement(\"option\",{value:\"III\"},\"III\"),l.a.createElement(\"option\",{value:\"IV\"},\"IV\")),l.a.createElement(i.a.Control.Feedback,{type:\"invalid\"},c.stage)))),l.a.createElement(i.a.Group,{controlId:\"location\"},l.a.createElement(i.a.Label,null,\"Location (City/Region)\"),l.a.createElement(i.a.Control,{type:\"text\",name:\"location\",value:t.location,onChange:p,isInvalid:!!c.location}),l.a.createElement(i.a.Control.Feedback,{type:\"invalid\"},c.location)),l.a.createElement(i.a.Group,{controlId:\"dateDiagnosed\"},l.a.createElement(i.a.Label,null,\"Date Diagnosed\"),l.a.createElement(i.a.Control,{type:\"date\",name:\"dateDiagnosed\",value:t.dateDiagnosed,onChange:p,isInvalid:!!c.dateDiagnosed}),l.a.createElement(i.a.Control.Feedback,{type:\"invalid\"},c.dateDiagnosed)),l.a.createElement(d.a,{variant:\"primary\",type:\"submit\",className:\"submit-btn\"},\"Record Patient Data\")))},E=t(52),g=t(56),p=t(53);const v=e=>{switch(e){case\"0\":return\"info\";case\"I\":return\"primary\";case\"II\":return\"warning\";case\"III\":return\"danger\";case\"IV\":return\"dark\";default:return\"secondary\"}};var h=e=>{let{patients:a,onDeletePatient:t,onUpdatePatient:r}=e;const[c,o]=Object(n.useState)(1),[m]=Object(n.useState)(5),[s,u]=Object(n.useState)(!1),[h,b]=Object(n.useState)(!1),[C,y]=Object(n.useState)(null),I=c*m,w=I-m,D=a.slice(w,I),k=Math.ceil(a.length/m);return l.a.createElement(\"div\",{className:\"table-container\"},l.a.createElement(\"h2\",null,\"Recorded Patients\"),a.length>0?l.a.createElement(l.a.Fragment,null,l.a.createElement(E.a,{striped:!0,bordered:!0,hover:!0,responsive:!0},l.a.createElement(\"thead\",null,l.a.createElement(\"tr\",null,l.a.createElement(\"th\",null,\"Name\"),l.a.createElement(\"th\",null,\"Email\"),l.a.createElement(\"th\",null,\"Age\"),l.a.createElement(\"th\",null,\"Weight\"),l.a.createElement(\"th\",null,\"Location\"),l.a.createElement(\"th\",null,\"Stage\"),l.a.createElement(\"th\",null,\"Diagnosed\"),l.a.createElement(\"th\",null,\"Actions\"))),l.a.createElement(\"tbody\",null,D.map((e,a)=>l.a.createElement(\"tr\",{key:a},l.a.createElement(\"td\",null,e.name),l.a.createElement(\"td\",null,e.email),l.a.createElement(\"td\",null,e.age),l.a.createElement(\"td\",null,e.weight,\" kg\"),l.a.createElement(\"td\",null,e.location),l.a.createElement(\"td\",null,l.a.createElement(\"span\",{className:`badge bg-${v(e.stage)}`},e.stage)),l.a.createElement(\"td\",null,e.dateDiagnosed),l.a.createElement(\"td\",null,l.a.createElement(d.a,{variant:\"outline-primary\",size:\"sm\",onClick:()=>(e=>{y(e),u(!0)})(e)},\"Edit\"),\" \",l.a.createElement(d.a,{variant:\"outline-danger\",size:\"sm\",onClick:()=>(e=>{y(e),b(!0)})(e)},\"Delete\")))))),k>1&&l.a.createElement(g.a,{className:\"justify-content-center mt-3\"},l.a.createElement(g.a.Prev,{onClick:()=>o(e=>Math.max(e-1,1)),disabled:1===c}),Array.from({length:k},(e,a)=>l.a.createElement(g.a.Item,{key:a+1,active:a+1===c,onClick:()=>o(a+1)},a+1)),l.a.createElement(g.a.Next,{onClick:()=>o(e=>Math.min(e+1,k)),disabled:c===k})),l.a.createElement(d.a,{variant:\"success\",onClick:()=>{const e=(e=>{const a=e.map(e=>[e.name,e.email,e.age,e.weight,e.location,e.stage,e.dateDiagnosed]);return[[\"Name\",\"Email\",\"Age\",\"Weight (kg)\",\"Location\",\"Cancer Stage\",\"Date Diagnosed\"].join(\",\"),...a.map(e=>e.map(e=>`\"${String(e).replace(/\"/g,'\"\"')}\"`).join(\",\"))].join(\"\\n\")})(a),t=new Blob([e],{type:\"text/csv;charset=utf-8;\"}),n=URL.createObjectURL(t),l=document.createElement(\"a\");l.setAttribute(\"href\",n),l.setAttribute(\"download\",\"breast_cancer_patients.csv\"),document.body.appendChild(l),l.click(),document.body.removeChild(l)},className:\"mt-3\"},\"Download CSV\")):l.a.createElement(\"p\",null,\"No patient data recorded yet.\"),l.a.createElement(p.a,{show:s,onHide:()=>u(!1)},l.a.createElement(p.a.Header,{closeButton:!0},l.a.createElement(p.a.Title,null,\"Edit Patient\")),l.a.createElement(p.a.Body,null,l.a.createElement(i.a.Group,{className:\"mb-3\"},l.a.createElement(i.a.Label,null,\"Name\"),l.a.createElement(i.a.Control,{type:\"text\",value:(null===C||void 0===C?void 0:C.name)||\"\",onChange:e=>y({...C,name:e.target.value})}))),l.a.createElement(p.a.Footer,null,l.a.createElement(d.a,{variant:\"secondary\",onClick:()=>u(!1)},\"Cancel\"),l.a.createElement(d.a,{variant:\"primary\",onClick:()=>{r(C),u(!1)}},\"Save Changes\"))),l.a.createElement(p.a,{show:h,onHide:()=>b(!1)},l.a.createElement(p.a.Header,{closeButton:!0},l.a.createElement(p.a.Title,null,\"Confirm Delete\")),l.a.createElement(p.a.Body,null,\"Are you sure you want to delete \",null===C||void 0===C?void 0:C.name,\"'s record?\"),l.a.createElement(p.a.Footer,null,l.a.createElement(d.a,{variant:\"secondary\",onClick:()=>b(!1)},\"Cancel\"),l.a.createElement(d.a,{variant:\"danger\",onClick:()=>{t(C),b(!1)}},\"Delete\"))))};t(32);var b=function(){const[e,a]=Object(n.useState)([]),[t,r]=Object(n.useState)(!1);return l.a.createElement(\"div\",{className:\"app-container\"},l.a.createElement(\"header\",{className:\"app-header\"},l.a.createElement(\"h1\",null,\"Breast Cancer Patient Recorder\"),l.a.createElement(\"p\",{className:\"lead\"},\"Record and manage patient data efficiently\")),l.a.createElement(\"div\",{className:\"container-fluid\"},l.a.createElement(\"div\",{className:\"row\"},l.a.createElement(\"div\",{className:\"col-lg-6\"},l.a.createElement(u,{onAddPatient:t=>{a([...e,t]),r(!0)}})),l.a.createElement(\"div\",{className:\"col-lg-6\"},t&&l.a.createElement(h,{patients:e,onDeletePatient:t=>{a(e.filter(e=>e.email!==t.email))},onUpdatePatient:t=>{a(e.map(e=>e.email===t.email?t:e))}})))))};var C=e=>{e&&e instanceof Function&&t.e(3).then(t.bind(null,57)).then(a=>{let{getCLS:t,getFID:n,getFCP:l,getLCP:r,getTTFB:c}=a;t(e),n(e),l(e),r(e),c(e)})};c.a.createRoot(document.getElementById(\"root\")).render(l.a.createElement(l.a.StrictMode,null,l.a.createElement(b,null))),C()}},[[37,1,2]]]);","extractedComments":[]}