{"version":3,"sources":["components/PatientForm.js","utils/validation.js","utils/csvGenerator.js","components/DataTable.js","App.js","reportWebVitals.js","index.js"],"names":["PatientForm","_ref","onAddPatient","patient","setPatient","useState","name","email","age","weight","location","stage","dateDiagnosed","errors","setErrors","success","setSuccess","handleChange","e","value","target","prev","[object Object]","React","createElement","className","Form","onSubmit","preventDefault","validationErrors","trim","length","test","Date","validatePatientData","Object","keys","setTimeout","Alert","variant","Row","Col","md","Group","controlId","Label","Control","type","onChange","isInvalid","Feedback","as","Button","getStageColor","DataTable","patients","onDeletePatient","onUpdatePatient","currentPage","setCurrentPage","patientsPerPage","showEditModal","setShowEditModal","showDeleteModal","setShowDeleteModal","currentPatient","setCurrentPatient","indexOfLastPatient","indexOfFirstPatient","currentPatients","slice","totalPages","Math","ceil","Fragment","Table","striped","bordered","hover","responsive","map","index","key","size","onClick","handleEdit","handleDelete","Pagination","Prev","p","max","disabled","Array","from","_","i","Item","active","Next","min","downloadCSV","csvContent","rows","join","row","item","String","replace","generateCSV","blob","Blob","url","URL","createObjectURL","link","document","setAttribute","body","appendChild","click","removeChild","Modal","show","onHide","Header","closeButton","Title","Body","Footer","handleSave","confirmDelete","App","setPatients","showTable","setShowTable","patientToDelete","filter","updatedPatient","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e0dccfb5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Form, Button, Alert, Row, Col } from 'react-bootstrap';\nimport { validatePatientData } from '../utils/validation';\n\nconst PatientForm = ({ onAddPatient }) => {\n  const [patient, setPatient] = useState({\n    name: '',\n    email: '',\n    age: '',\n    weight: '',\n    location: '',\n    stage: '',\n    dateDiagnosed: ''\n  });\n  \n  const [errors, setErrors] = useState({});\n  const [success, setSuccess] = useState(false);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setPatient(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const validationErrors = validatePatientData(patient);\n    \n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n      setSuccess(false);\n    } else {\n      setErrors({});\n      onAddPatient(patient);\n      setPatient({\n        name: '',\n        email: '',\n        age: '',\n        weight: '',\n        location: '',\n        stage: '',\n        dateDiagnosed: ''\n      });\n      setSuccess(true);\n      setTimeout(() => setSuccess(false), 3000);\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <h2>Patient Information</h2>\n      <Form onSubmit={handleSubmit}>\n        {success && <Alert variant=\"success\">Patient data recorded successfully!</Alert>}\n        \n        <Row>\n          <Col md={6}>\n            <Form.Group controlId=\"name\">\n              <Form.Label>Full Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"name\"\n                value={patient.name}\n                onChange={handleChange}\n                isInvalid={!!errors.name}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.name}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Col>\n          <Col md={6}>\n            <Form.Group controlId=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                name=\"email\"\n                value={patient.email}\n                onChange={handleChange}\n                isInvalid={!!errors.email}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.email}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col md={4}>\n            <Form.Group controlId=\"age\">\n              <Form.Label>Age</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"age\"\n                value={patient.age}\n                onChange={handleChange}\n                isInvalid={!!errors.age}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.age}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Col>\n          <Col md={4}>\n            <Form.Group controlId=\"weight\">\n              <Form.Label>Weight (kg)</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"weight\"\n                value={patient.weight}\n                onChange={handleChange}\n                isInvalid={!!errors.weight}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.weight}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Col>\n          <Col md={4}>\n            <Form.Group controlId=\"stage\">\n              <Form.Label>Cancer Stage</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name=\"stage\"\n                value={patient.stage}\n                onChange={handleChange}\n                isInvalid={!!errors.stage}\n              >\n                <option value=\"\">Select stage</option>\n                <option value=\"0\">0 - Carcinoma in situ</option>\n                <option value=\"I\">I</option>\n                <option value=\"II\">II</option>\n                <option value=\"III\">III</option>\n                <option value=\"IV\">IV</option>\n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.stage}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Col>\n        </Row>\n\n        <Form.Group controlId=\"location\">\n          <Form.Label>Location (City/Region)</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"location\"\n            value={patient.location}\n            onChange={handleChange}\n            isInvalid={!!errors.location}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {errors.location}\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group controlId=\"dateDiagnosed\">\n          <Form.Label>Date Diagnosed</Form.Label>\n          <Form.Control\n            type=\"date\"\n            name=\"dateDiagnosed\"\n            value={patient.dateDiagnosed}\n            onChange={handleChange}\n            isInvalid={!!errors.dateDiagnosed}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {errors.dateDiagnosed}\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\" className=\"submit-btn\">\n          Record Patient Data\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default PatientForm;","export const validatePatientData = (patient) => {\n  const errors = {};\n  \n  if (!patient.name.trim()) {\n    errors.name = 'Name is required';\n  } else if (patient.name.length < 2) {\n    errors.name = 'Name must be at least 2 characters';\n  }\n  \n  if (!patient.email) {\n    errors.email = 'Email is required';\n  } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(patient.email)) {\n    errors.email = 'Email is invalid';\n  }\n  \n  if (!patient.age) {\n    errors.age = 'Age is required';\n  } else if (patient.age < 18 || patient.age > 120) {\n    errors.age = 'Age must be between 18 and 120';\n  }\n  \n  if (!patient.weight) {\n    errors.weight = 'Weight is required';\n  } else if (patient.weight < 30 || patient.weight > 300) {\n    errors.weight = 'Weight must be between 30 and 300 kg';\n  }\n  \n  if (!patient.location.trim()) {\n    errors.location = 'Location is required';\n  }\n  \n  if (!patient.stage) {\n    errors.stage = 'Cancer stage is required';\n  }\n  \n  if (!patient.dateDiagnosed) {\n    errors.dateDiagnosed = 'Diagnosis date is required';\n  } else if (new Date(patient.dateDiagnosed) > new Date()) {\n    errors.dateDiagnosed = 'Date cannot be in the future';\n  }\n  \n  return errors;\n};","export const generateCSV = (patients) => {\n  const headers = [\n    'Name', 'Email', 'Age', 'Weight (kg)', \n    'Location', 'Cancer Stage', 'Date Diagnosed'\n  ];\n  \n  const rows = patients.map(patient => [\n    patient.name,\n    patient.email,\n    patient.age,\n    patient.weight,\n    patient.location,\n    patient.stage,\n    patient.dateDiagnosed\n  ]);\n  \n  const csvRows = [\n    headers.join(','),\n    ...rows.map(row => \n      row.map(item => `\"${String(item).replace(/\"/g, '\"\"')}\"`).join(',')\n    )\n  ];\n  \n  return csvRows.join('\\n');\n};","import React, { useState } from 'react';\nimport { \n  Table, \n  Button, \n  Modal, \n  Form,   // <-- This was missing\n  Pagination \n} from 'react-bootstrap';\nimport { generateCSV } from '../utils/csvGenerator';\n\nconst DataTable = ({ patients, onDeletePatient, onUpdatePatient }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [patientsPerPage] = useState(5);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [currentPatient, setCurrentPatient] = useState(null);\n\n  // Pagination logic\n  const indexOfLastPatient = currentPage * patientsPerPage;\n  const indexOfFirstPatient = indexOfLastPatient - patientsPerPage;\n  const currentPatients = patients.slice(indexOfFirstPatient, indexOfLastPatient);\n  const totalPages = Math.ceil(patients.length / patientsPerPage);\n\n  const handleEdit = (patient) => {\n    setCurrentPatient(patient);\n    setShowEditModal(true);\n  };\n\n  const handleSave = () => {\n    onUpdatePatient(currentPatient);\n    setShowEditModal(false);\n  };\n\n  const handleDelete = (patient) => {\n    setCurrentPatient(patient);\n    setShowDeleteModal(true);\n  };\n\n  const confirmDelete = () => {\n    onDeletePatient(currentPatient);\n    setShowDeleteModal(false);\n  };\n\n  const downloadCSV = () => {\n    const csvContent = generateCSV(patients);\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'breast_cancer_patients.csv');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"table-container\">\n      <h2>Recorded Patients</h2>\n      {patients.length > 0 ? (\n        <>\n          <Table striped bordered hover responsive>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Age</th>\n                <th>Weight</th>\n                <th>Location</th>\n                <th>Stage</th>\n                <th>Diagnosed</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {currentPatients.map((patient, index) => (\n                <tr key={index}>\n                  <td>{patient.name}</td>\n                  <td>{patient.email}</td>\n                  <td>{patient.age}</td>\n                  <td>{patient.weight} kg</td>\n                  <td>{patient.location}</td>\n                  <td>\n                    <span className={`badge bg-${getStageColor(patient.stage)}`}>\n                      {patient.stage}\n                    </span>\n                  </td>\n                  <td>{patient.dateDiagnosed}</td>\n                  <td>\n                    <Button variant=\"outline-primary\" size=\"sm\" onClick={() => handleEdit(patient)}>\n                      Edit\n                    </Button>{' '}\n                    <Button variant=\"outline-danger\" size=\"sm\" onClick={() => handleDelete(patient)}>\n                      Delete\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n\n          {totalPages > 1 && (\n            <Pagination className=\"justify-content-center mt-3\">\n              <Pagination.Prev \n                onClick={() => setCurrentPage(p => Math.max(p - 1, 1))} \n                disabled={currentPage === 1}\n              />\n              {Array.from({ length: totalPages }, (_, i) => (\n                <Pagination.Item\n                  key={i + 1}\n                  active={i + 1 === currentPage}\n                  onClick={() => setCurrentPage(i + 1)}\n                >\n                  {i + 1}\n                </Pagination.Item>\n              ))}\n              <Pagination.Next \n                onClick={() => setCurrentPage(p => Math.min(p + 1, totalPages))} \n                disabled={currentPage === totalPages}\n              />\n            </Pagination>\n          )}\n\n          <Button variant=\"success\" onClick={downloadCSV} className=\"mt-3\">\n            Download CSV\n          </Button>\n        </>\n      ) : (\n        <p>No patient data recorded yet.</p>\n      )}\n\n      {/* Edit Modal */}\n      <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Patient</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={currentPatient?.name || ''}\n              onChange={(e) => setCurrentPatient({...currentPatient, name: e.target.value})}\n            />\n          </Form.Group>\n          {/* Add other fields similarly */}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setShowEditModal(false)}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={handleSave}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      {/* Delete Modal */}\n      <Modal show={showDeleteModal} onHide={() => setShowDeleteModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Confirm Delete</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Are you sure you want to delete {currentPatient?.name}'s record?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setShowDeleteModal(false)}>\n            Cancel\n          </Button>\n          <Button variant=\"danger\" onClick={confirmDelete}>\n            Delete\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nconst getStageColor = (stage) => {\n  switch(stage) {\n    case '0': return 'info';\n    case 'I': return 'primary';\n    case 'II': return 'warning';\n    case 'III': return 'danger';\n    case 'IV': return 'dark';\n    default: return 'secondary';\n  }\n};\n\nexport default DataTable;","import React, { useState } from 'react';\nimport PatientForm from './components/PatientForm';\nimport DataTable from './components/DataTable';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.css';\n\nfunction App() {\n  const [patients, setPatients] = useState([]);\n  const [showTable, setShowTable] = useState(false);\n\n  const addPatient = (patient) => {\n    setPatients([...patients, patient]);\n    setShowTable(true);\n  };\n\n  const deletePatient = (patientToDelete) => {\n    setPatients(patients.filter(p => p.email !== patientToDelete.email));\n  };\n\n  const updatePatient = (updatedPatient) => {\n    setPatients(patients.map(p => \n      p.email === updatedPatient.email ? updatedPatient : p\n    ));\n  };\n\n  return (\n    <div className=\"app-container\">\n      <header className=\"app-header\">\n        <h1>Breast Cancer Patient Recorder</h1>\n        <p className=\"lead\">Record and manage patient data efficiently</p>\n      </header>\n      \n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <PatientForm onAddPatient={addPatient} />\n          </div>\n          <div className=\"col-lg-6\">\n            {showTable && (\n              <DataTable \n                patients={patients} \n                onDeletePatient={deletePatient}\n                onUpdatePatient={updatePatient}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;","// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Create a root element for React 18's concurrent rendering\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Render the main App component\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// Performance monitoring (optional)\n// Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}